// m1/userController.ts
import { PrismaClient } from "@prisma/client";
import { Request, Response } from "express";
import { producer, consumer } from "./kafkaClient";

const prisma = new PrismaClient();

export const getUser = async (req: Request, res: Response): Promise<Response> => {
  try {
    const { id } = req.params;
    if (id) {
      const user = await prisma.user.findUnique({ where: { id } });
      if (!user) return res.status(404).json({ error: "Usuario no encontrado" });
      return res.status(200).json(user);
    } else {
      const users = await prisma.user.findMany();
      return res.status(200).json(users);
    }
  } catch (error) {
    console.error("Error al obtener usuario(s):", error);
    return res.status(500).json({ error: "Error interno al obtener usuario(s)" });
  }
};

export const postUser = async (req: Request, res: Response): Promise<Response> => {
  try {
    const { name, rol } = req.body;
    if (!rol) return res.status(400).json({ error: "El campo 'rol' es requerido" });
    if (rol !== "ADMIN" && rol !== "USER") {
      return res.status(400).json({ error: "El 'rol' debe ser 'ADMIN' o 'USER'" });
    }

    const newUser = await prisma.user.create({
      data: { name, rol },
    });

    // Publicar el evento en Kafka
    await producer.connect();
    await producer.send({
      topic: "user-created",
      messages: [{ value: JSON.stringify(newUser) }],
    });
    await producer.disconnect();

    return res.status(201).json(newUser);
  } catch (error) {
    console.error("Error al crear usuario:", error);
    return res.status(500).json({ error: "Error interno al crear usuario" });
  }
};

export const putUser = async (req: Request, res: Response): Promise<Response> => {
  try {
    const { id } = req.params;
    const { name, rol } = req.body;
    if (rol && rol !== "ADMIN" && rol !== "USER") {
      return res.status(400).json({ error: "El 'rol' debe ser 'ADMIN' o 'USER'" });
    }

    const updatedUser = await prisma.user.update({
      where: { id },
      data: { name, rol },
    });
    return res.status(200).json(updatedUser);
  } catch (error) {
    console.error("Error al actualizar usuario:", error);
    return res.status(500).json({ error: "Error interno al actualizar usuario" });
  }
};

export const deleteUser = async (req: Request, res: Response): Promise<Response> => {
  try {
    const { id } = req.params;
    const deletedUser = await prisma.user.delete({
      where: { id },
    });
    return res.status(200).json(deletedUser);
  } catch (error) {
    console.error("Error al eliminar usuario:", error);
    return res.status(500).json({ error: "Error interno al eliminar usuario" });
  }
};
